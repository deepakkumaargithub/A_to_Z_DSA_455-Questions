 1. approch 
  -- using two for loops
 
class Solution
{
    void leftRotate(long arr[], int k,int n)
    {
           k =k%n;
          for( int i=0; i<k; i++){  // run k times.
              long temp = arr[0];   // store first value.
              for( int j =1; j<n; j++){ //  shift n-1 elements , k times.
                  arr[j-1] = arr[j];
              }
              arr[n-1]=temp;
          }
    }
} 
 
time complexity = O(n^2)
aux space = O(1)



2.approach
-- using copy of array.


class Solution
{
    void leftRotate(long arr[], int k,int n){
        long[] copyarr = arr.clone();  // copy orignal array
        int count = 0;
      for( int i = k; i<n+k; i++){     // using % operator assigned value ( run n times) 
          arr[count%n] = copyarr[i%n];
          count++;
      }
    }
}


time complexity = O(n)
aux space = O(n)




3.approach 
-- using reverse technique

class Solution
{
    void leftRotate(long arr[], int k,int n){
        
        k = k%n;
        
        // reverse firts k's elements
        reverse(arr ,0, k-1);
        
        // reverse after k's element
        reverse(arr,k,n-1);
        
        // reverse whole arraay
        reverse(arr,0,n-1);
    }
    
    void reverse(long[] arr , int start, int end){
        int i = start;
        int j = end;
        while ( i <j){
            long temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }
    }
}

time complexity = O(n)
aux space = O(1)


